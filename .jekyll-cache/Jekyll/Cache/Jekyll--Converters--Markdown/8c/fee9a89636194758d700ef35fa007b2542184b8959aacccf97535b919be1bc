I"<h2 id="프레임워크framework란">프레임워크(Framework)란?</h2>

<p><img src="/assets/images/img/2022_04_28/frame.jpeg" /></p>

<p>프레임워크는 뼈대나 기반구조를 뜻하고, 제어의 역전 개념이 적용된 대표적인 기술입니다.</p>

<p>소프트웨어에서의 프레임워크는 ‘소프트웨어의 특정 문제를 해결하기 위해서 상호 협력하는 클래스와 인터페이스의 집합’ 이라 할 수 있으며, 완성된 어플리케이션이 아닌 프로그래머가 완성시키는 작업을 해야합니다.</p>

<p>객체 지향 개발을 하게 되면서 통합성, 일관성의 부족이 발생되는 문제를 해결할 방법중 하나라고 할 수 있습니다.</p>

<p>특징</p>
<ul>
  <li>특정 개념들의 추상화를 제공하는 여러 클래스나 컴포넌트로 구성되어 있습니다.</li>
  <li>추상적인 개념들이 문제를 해결하기 위해 같이 작업하는 방법을 정의합니다.</li>
  <li>컴포넌트들은 재사용이 가능합니다.</li>
  <li>높은 수준에서 패턴들을 조작화 할 수 있습니다.</li>
</ul>

<h2 id="프레임워크와-라이브러리의-차이점">프레임워크와 라이브러리의 차이점</h2>

<p>라이브러리와 프레임워크의 차이는 제어 흐름에 대한 주도성이 누구에게/어디에 있는가에 있습니다.
즉, 어플리케이션의 Flow(흐름)를 누가 쥐고 있느냐에 달려 있습니다.
프레임워크는 전체적인 흐름을 스스로가 쥐고 있으며 사용자는 그 안에서 필요한 코드를 짜 넣으며 반면에 라이브러리는 사용자가 전체적인 흐름을 만들며 라이브러리를 가져다 쓰는 것이라고 할 수 있습니다.
다시 말해, 라이브러리는 라이브러리를 가져다가 사용하고 호출하는 측에 전적으로 주도성이 있으며 프레임워크는 그 틀안에 이미 제어 흐름에 대한 주도성이 내재(내포)하고 있습니다.
프레임워크는 가져다가 사용한다기보다는 거기에 들어가서 사용한다는 느낌/관점으로 접근할 수 있습니다.</p>

<ul>
  <li>라이브러리를 사용하는 애플리케이션 코드는 애플리케이션 흐름을 직접 제어합니다.</li>
  <li>단지 동작하는 중에 필요한 기능이 있을 때 능동적으로 라이브러리를 사용할 뿐입니다.</li>
  <li>반면에 프레임워크는 거꾸로 애플리케이션 코드가 프레임워크에 의해 사용되는 것입니다.</li>
  <li>보통 프레임워크 위에 개발한 클래스를 등록해두고, 프레임워크가 흐름을 주도하는 중에 개발자가 만든 애플리케이션 코드를 사용하도록 만드는 방식입니다.</li>
  <li>프레임워크에는 분명한 <strong>제어의 역전</strong> 개념이 적용되어 있어야 합니다.</li>
  <li>애플리케이션 코드는 프레임워크가 짜놓은 틀에서 수동적으로 동작해야 합니다.</li>
</ul>

<p><strong>제어의 역전</strong> 이란 어떠한 일을 하도록 만들어진 프레임워크에 제어의 권한을 넘김으로써 클라이언트 코드가 신경 써야 할 것을 줄이는 전략입니다.<br />
이것을 제어가 역전 되었다 라고 합니다. 일반적으로 라이브러리는 프로그래머가 작성하는 클라이언트 코드가 라이브러리의 메소드를 호출해서 사용하는 것을 의미 합니다.<br />
프레임워크를 규정하는 특성은 프레임워크의 메소드가 사용자의 코드를 호출 한다는데 있습니다.<br />
여기까지는 이해가 쉽지만, 의문이 생깁니다.<br />
대체 어떻게 프레임워크가 나의 메소드를 호출하는가에 대한 의문입니다.<br />
어떻게 하면 프레임워크가 나의 코드를 호출 할 수 있을까? 프레임워크는 내가 작성한 코드를 모르잖아!.<br />
제어를 역전시키는 (프레임워크가 나의 코드를 호출 할 수 있게 하는) 가장 쉽게 생각할 수 있는 접근 방법은 프레임워크의 event, delegate 에 나의 메소드를 등록 시키는 것입니다.<br />
전달되는 인자와 반환 형식만 일치 한다면, 프레임워크 코드는 내가 작성한 객체와 타입을 고려하지 않습니다.<br />
등록된 메소드만 감지하여 실행 invoke 하는 것입니다.<br />
다른 방법은 프레임워크에 정의 되어 있는 인터페이스 interface, 추상타입 abstract 을 나의 코드에서 구현, 상속 한후 프레임워크에 넘겨주는 것입니다.<br />
프레임워크는 인터페이스와 추상을 알고 있으므로 내가 하고자 하는 일련의 작업을 처리할 수 있습니다.<br />
이는 객체를 프레임워크에 주입하는 것이고, 이를 의존을 주입 dependency injection 한다고 합니다.</p>

<p>만약 프레임워크가 담당하는 부분이 내가 하고자 하는 목적과 다를 경우에는 어떻게 해야 할까요?<br />
그렇다면 단순히 프레임워크를 잘못 가져다 쓴 것입니다.<br />
더 목적에 가까운 프레임워크를 찾아보면 대부분 있을 것이고 없거나 찾기 힘들다면 비슷한 프레임워크를 라이브러리 단계에서 변경해서 다른 프레임워크로 만들면 될 것입니다.</p>

<p>출처: https://webclub.tistory.com/458 [Web Club]</p>

:ET