I"l<h3 id="star-웹web-이란">:star: 웹(Web) 이란?</h3>
<ul>
  <li>일반적인 의미: 거미집 모양의 망</li>
  <li>기술적인 의미: 인터넷 망 안에서 정보를 공유, 검색할 수 있게 하는 시스템이다. 인터넷에 연결된 사용자들은 서로 정보를 공유할 수 있다. 월드 와이드 웹(WWW)이라고 부르는 게 바로 웹이다.</li>
  <li>인터넷 서비스 종류로 웹만 있는 게 아니다. SMTP(전자우편), FTP(파일전송), Telnet(원격접속) 등 다양하게 있는데, 팀 버너스리가 SMTP이나 FTP를 통해 정보를 주고 받는 것을 비효율적이라 생각하여 WWW(월드 와이드 웹)을 고안하였다.</li>
  <li>웹을 지탱하고 구성하는 아래 세 가지 기술이 있다.
    <ul>
      <li>HTTP(통신 규칙)</li>
      <li>URI or URL(주소)</li>
      <li>HTML(내용</li>
    </ul>
  </li>
</ul>

<h3 id="star-서버server">:star: 서버(Server)</h3>
<ul>
  <li>네트워크를 통해 클라이언트에게 정보나 서비스를 제공하는 컴퓨터 시스템</li>
</ul>

<h3 id="star-웹-서버web-server">:star: 웹 서버(Web Server)</h3>
<ul>
  <li>인터넷을 기반으로 클라이언트에게 웹 서비스를 제공하는 컴퓨터</li>
  <li>
    <p>클라이언트의 입장: 웹 서버에게 주소(url)을 가지고 통신 규칙(http)에 맞게 요청하면, 알맞은 내용(html)을 응답 받음</p>
  </li>
  <li>
    <p>서버 입장: 클라이언트의 요청을 기다리고, 웹 요청(http)에 대한 데이터를 만들어서 응답, 이때 데이터는 웹에서 처리할 수 있는 html, css, 이미지 등 정적인 데이터로 한정</p>
  </li>
  <li>
    <p>우리도 로컬 컴퓨터로 쉽게 웹 서버를 만들 수 있다. 무료로 공개된 아파치 웹 서버를 깔고, 포트번호랑 HTML 파일 위치를 정해주면 전세계 사람들에게 웹 서비스를 제공할 수 있는 컴퓨터를 가질 수 있다.</p>
  </li>
  <li>그런데 한 가지 문제가 있다. 웹 서버에서는 html, css, 이미지 등 정적인 자료만 제공할 수 있다. 예를 들어 구구단 페이지를 전달할 때, 정적인 자료만 제공할 수 있으므로 1 x 1 = 1, 1 x 2 = 2… 등의 내용을 미리 다 작성해놔야 한다. 1, 2단이라 아니라 100단, 1000단이라고 생각하면 문제가 심각해진다. (프로그램을 웹에서 실행할 수 있다면 for문 몇 줄이면 끝나는 건데…)</li>
</ul>

<p>다시 말해, 웹 서버에서 브라우저에게 html을 주기 전에 애플리케이션을 돌려서 데이터를 만들고 그 만든 데이터를 넣어 주면 간단하겠지만 html은 프로그래밍 언어가 아니라 위의 문제를 해결할 수 없었다. (html은 마크업 언어)</p>

<ul>
  <li>결국 요청에 따른 비즈니스 로직 처리나 DB 연동 문제를 해결하기 위해 등장한 게 WAS이다.</li>
</ul>

<h3 id="star-web">:star: Web</h3>
<p>웹 애플리케이션은 드디어 우리가 원했던, 바로 그것. 웹에서 실행되는 응용 프로그램을 말한다. 우리는 애플리케이션을 통해서 이제 html의 한계를 극복할 수 있게 되었다</p>

<h3 id="star-web-application-server">:star: Web Application Server</h3>
<ul>
  <li>
    <p>WAS는 웹 애플리케이션을 실행시켜 필요한 기능을 수행하고 그 결과를 웹 서버에게 전달하는 일종의 미들웨어를 말한다.</p>
  </li>
  <li>
    <p>php, jsp, asp와 같은 언어들을 사용해 동적인 페이지를 만들어낼 수 있는 서버이다.</p>
  </li>
  <li>
    <p>프로그램 실행 환경과 데이터베이스 접속 기능을 제공한다.</p>
  </li>
  <li>
    <p>비즈니스 로직 수행이 가능하다.</p>
  </li>
  <li>
    <p>웹 서버 + 웹 컨테이너를 합친 형태다.</p>

    <ul>
      <li>
        <p>컨테이너: jsp, servlet을 실행시킬 수 있는 소프트웨어</p>
      </li>
      <li>
        <p>자바 계열에선 웹 애플리케이션을 컨테이너라고 부른다.</p>
      </li>
      <li>
        <p>웹 애플리케이션 컨테이너: 웹 애플리케이션이 배포되는 공간</p>
      </li>
    </ul>

    <p><img src="/assets/images/img/2022_04_19/web.png" /></p>
  </li>
</ul>

<h3 id="star-서버-종류-및-차이점">:star: 서버 종류 및 차이점</h3>

<h4 id="was-종류">WAS 종류</h4>
<ul>
  <li>아파치</li>
  <li>Microsoft IIS</li>
  <li>Ngnix</li>
</ul>

<h4 id="was-종류-1">WAS 종류</h4>
<ul>
  <li>톰캣</li>
  <li>JEUS</li>
  <li>IBM WebSphere</li>
</ul>

<h4 id="차이점">차이점</h4>
<ul>
  <li>
    <p>웹 서버는 정적인 컨텐츠만 줄 수 있다.</p>
  </li>
  <li>
    <p>WAS는 어떤 애플리케이션을 돌리고, DB를 연결하고, 어떤 로직을 수행해서, 만든 데이터를 전달할 수 있다.</p>
  </li>
  <li>
    <p>요약: “요청에 따라 변하는 정보를 제공할 수 있는가?”</p>
  </li>
</ul>

<h3 id="웹-서버와-was를-따로-사용하는-이유">웹 서버와 WAS를 따로 사용하는 이유</h3>

<p><img src="/assets/images/img/2022_04_19/web1.png" /></p>

<ul>
  <li>서로의 기능을 분리하여 서버 부하를 방지할 수 있다.
    <ul>
      <li>WAS는 DB 조회 등 페이지를 만들기 위한 다양한 로직을 처리하는데,
  단순한 정적 컨텐츠까지도 WAS에서 제공하면 다른 작업에 사용하는 리소스로 인해 지연이 생겨날 수 있다.</li>
      <li>다만, 톰캣 5.5 이상부터는 성능이 크게 떨어지지 않는다고 한다.</li>
    </ul>
  </li>
  <li>물리적으로 분리하여 보안을 강화할 수 있다.
    <ul>
      <li>SSL에 대한 암복호화 처리에 웹 서버를 사용한다.</li>
      <li>웹 서버를 앞단에 두어, 공격이 있을 때 중요한 정보가 담긴 DB나 로직까지(WAS까지) 전파되지 못하게 한다</li>
    </ul>
  </li>
</ul>

<p><img src="/assets/images/img/2022_04_19/web2.png" /></p>

<ul>
  <li>여러 대의 WAS를 연결 가능할 수 있다.
    <ul>
      <li>Load Balancing : Load Balancing이란?
  하나의 인터넷 서비스가 발생하는 트래픽이 많을 때 여러 대의 서버가 분산처리하여 서버의 로드율 증가, 부하량, 속도저하 등을 고려하여 적절히 분산처리하여 해결해주는 서비스입니다.</li>
      <li>fail over(작동 중지된 WAS를 대신해 다른 WAS를 사용하여 장애를 극복함)</li>
      <li>fail back(작동 중지된 WAS를 재동작시킴)</li>
    </ul>
  </li>
  <li>대용량 웹 애플리케이션의 경우(여러 개의 서버 사용) Web Server와 WAS를 분리하여 무중단 운영을 위한 장애 극복에 쉽게 대응할 수 있다.
    <ul>
      <li>다른 종류의 WAS로 서비스 가능
하나의 서버에서 PHP Application과 Java Application을 함께 사용할 수 있다.</li>
    </ul>
  </li>
</ul>

<p>출처 : https://velog.io/@bky373/Web-%EC%9B%B9-%EC%84%9C%EB%B2%84%EC%99%80-WAS</p>
:ET